//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Json {
    using System;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Visual FA", "1.0.0.0")]
    internal partial struct FAMatch {
        private int _symbolId;
        private string _value;
        private long _position;
        private int _line;
        private int _column;
        ///  <summary>
        ///  Indicates the symbol id for an error token
        ///  </summary>
        public const int Error = -1;
        ///  <summary>
        ///  Indicates the symbol id for end of input
        ///  </summary>
        public const int EndOfInput = -2;
        ///  <summary>
        ///  The matched symbol - this is the accept id
        ///  </summary>
        public int SymbolId {
            get {
                return this._symbolId;
            }
        }
        ///  <summary>
        ///  The matched value
        ///  </summary>
        public string Value {
            get {
                return this._value;
            }
        }
        ///  <summary>
        ///  The position of the match within the input
        ///  </summary>
        public long Position {
            get {
                return this._position;
            }
        }
        ///  <summary>
        ///  The one based line number
        ///  </summary>
        public int Line {
            get {
                return this._line;
            }
        }
        ///  <summary>
        ///  The one based column
        ///  </summary>
        public int Column {
            get {
                return this._column;
            }
        }
        ///  <summary>
        ///  Indicates whether the text matched the expression
        ///  </summary>
        ///  <remarks>Non matches are returned with negative accept symbols. You can use this property to determine if the text therein was part of a match.</remarks>
        public bool IsSuccess {
            get {
                return (this._symbolId > -1);
            }
        }
        ///  <summary>
        ///  Provides a string representation of the match
        ///  </summary>
        ///  <returns>A string containing match information</returns>
        public override string ToString() {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append("[SymbolId: ");
            sb.Append(this.SymbolId);
            sb.Append(", Value: ");
            if ((this.Value != null)) {
                sb.Append("\"");
                sb.Append(this.Value.Replace("\r", "\\r").Replace("\t", "\\t").Replace("\n", "\\n").Replace("", "\\v"));
                sb.Append("\", Position: ");
            }
            else {
                sb.Append("null, Position: ");
            }
            sb.Append(this.Position);
            sb.Append(" (");
            sb.Append(this.Line);
            sb.Append(", ");
            sb.Append(this.Column);
            sb.Append(")]");
            return sb.ToString();
        }
        ///  <summary>
        ///  Constructs a new instance
        ///  </summary>
        ///  <param name="symbolId">The symbol id</param>
        ///  <param name="value">The matched value</param>
        ///  <param name="position">The match position</param>
        ///  <param name="line">The line</param>
        ///  <param name="column">The column</param>
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static FAMatch Create(int symbolId, string value, long position, int line, int column) {
            FAMatch result = default(FAMatch);
            result._symbolId = symbolId;
            result._value = value;
            result._position = position;
            result._line = line;
            result._column = column;
            return result;
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Visual FA", "1.0.0.0")]
    internal abstract partial class FARunner : Object, IEnumerable<FAMatch> {
        protected internal FARunner() {
            this.position = -1;
            this.line = 1;
            this.column = 1;
            this._tabWidth = 4;
        }
        public class Enumerator : Object, IEnumerator<FAMatch> {
            private int _state;
            private FAMatch _current;
            private WeakReference<FARunner> _parent;
            public Enumerator(FARunner parent) {
                this._parent = new WeakReference<FARunner>(parent);
                this._state = -2;
            }
            public FAMatch Current {
                get {
                    if ((this._state == -3)) {
                        throw new ObjectDisposedException("Enumerator");
                    }
                    if ((this._state < 0)) {
                        throw new InvalidOperationException("The enumerator is not positioned on an element");
                    }
                    return this._current;
                }
            }
            bool System.Collections.IEnumerator.MoveNext() {
                return this.MoveNext();
            }
            object System.Collections.IEnumerator.Current {
                get {
                    return this.Current;
                }
            }
            void System.Collections.IEnumerator.Reset() {
                this.Reset();
            }
            void IDisposable.Dispose() {
                this._state = -3;
            }
            public bool MoveNext() {
                if ((this._state == -3)) {
                    throw new ObjectDisposedException("Enumerator");
                }
                if ((this._state == -1)) {
                    return false;
                }
                this._state = 0;
                FARunner parent;
                if ((false == this._parent.TryGetTarget(out parent))) {
                    throw new InvalidOperationException("The parent was destroyed");
                }
                this._current = parent.NextMatch();
                if ((this._current.SymbolId == -2)) {
                    this._state = -2;
                    return false;
                }
                return true;
            }
            public void Reset() {
                if ((this._state == -3)) {
                    throw new ObjectDisposedException("Enumerator");
                }
                FARunner parent;
                if ((false == this._parent.TryGetTarget(out parent))) {
                    throw new InvalidOperationException("The parent was destroyed");
                }
                parent.Reset();
                this._state = -2;
            }
        }
        ///  <summary>
        ///  Indicates the width of a tab, in columns
        ///  </summary>
        public int TabWidth {
            get {
                return this._tabWidth;
            }
            set {
                if ((value < 1)) {
                    throw new ArgumentOutOfRangeException();
                }
                this._tabWidth = value;
            }
        }
        private int _tabWidth;
        protected int position;
        protected int line;
        protected int column;
        protected static void ThrowUnicode(int pos) {
            throw new IOException(string.Concat("Unicode error in stream at position ", pos.ToString()));
        }
        public abstract FAMatch NextMatch();
        public abstract void Reset();
        public IEnumerator<FAMatch> GetEnumerator() {
            return new Enumerator(this);
        }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
            return new Enumerator(this);
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Visual FA", "1.0.0.0")]
    internal abstract partial class FAStringRunner : FARunner {
        public static bool UsingSpans {
            get {
                return false;
            }
        }
        protected string input_string;
        public void Set(string @string) {
            this.input_string = @string;
            this.position = -1;
            this.line = 1;
            this.column = 1;
        }
        public override void Reset() {
            this.position = -1;
            this.line = 1;
            this.column = 1;
        }
        //  much bigger, but faster code
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        protected virtual void Advance(string str, ref int ch, ref int len, bool first) {
            if ((false == first)) {
                if ((ch == 10)) {
                    this.line = (this.line + 1);
                    this.column = 1;
                }
                else {
                    if ((ch == 13)) {
                        this.column = 1;
                    }
                    else {
                        if ((ch == 9)) {
                            this.column = (((this.column - 1) 
                                        / this.TabWidth) 
                                        * (this.TabWidth + 1));
                        }
                        else {
                            if ((ch > 31)) {
                                this.column = (this.column + 1);
                            }
                        }
                    }
                }
                len = (len + 1);
                if ((ch > 65535)) {
                    len = (len + 1);
                }
                this.position = (this.position + 1);
            }
            if ((this.position < str.Length)) {
                char ch1 = str[this.position];
                if (char.IsHighSurrogate(ch1)) {
                    this.position = (this.position + 1);
                    if ((this.position >= str.Length)) {
                        FAStringRunner.ThrowUnicode(this.position);
                    }
                    char ch2 = str[this.position];
                    ch = char.ConvertToUtf32(ch1, ch2);
                }
                else {
                    ch = System.Convert.ToInt32(ch1);
                }
            }
            else {
                ch = -1;
            }
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Visual FA", "1.0.0.0")]
    internal abstract partial class FATextReaderRunner : FARunner {
        protected TextReader input_reader;
        protected StringBuilder capture;
        protected int current;
        protected FATextReaderRunner() {
            this.capture = new StringBuilder();
        }
        public void Set(TextReader reader) {
            this.input_reader = reader;
            this.current = -2;
            this.position = -1;
            this.line = 1;
            this.column = 1;
        }
        public override void Reset() {
            throw new NotSupportedException();
        }
        protected virtual void Advance() {
            if ((this.current == 10)) {
                this.line = (this.line + 1);
                this.column = 1;
            }
            else {
                if ((this.current == 13)) {
                    this.column = 1;
                }
                else {
                    if ((this.current == 9)) {
                        this.column = (((this.column - 1) 
                                    / this.TabWidth) 
                                    * (this.TabWidth + 1));
                    }
                    else {
                        if ((this.current > 31)) {
                            this.column = (this.column + 1);
                        }
                    }
                }
            }
            if ((this.current > -1)) {
                this.capture.Append(char.ConvertFromUtf32(this.current));
            }
            this.current = this.input_reader.Read();
            if ((this.current == -1)) {
                return;
            }
            this.position = (this.position + 1);
            char ch1 = System.Convert.ToChar(this.current);
            if (char.IsHighSurrogate(ch1)) {
                this.current = this.input_reader.Read();
                if ((this.current == -1)) {
                    FATextReaderRunner.ThrowUnicode(this.position);
                }
                char ch2 = System.Convert.ToChar(this.current);
                this.current = char.ConvertToUtf32(ch1, ch2);
                this.position = (this.position + 1);
            }
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Visual FA", "1.0.0.0")]
    internal sealed partial class JsonStringRunner : FAStringRunner {
        private FAMatch NextMatchImpl(string s) {
            int ch;
            int len;
            int p;
            int l;
            int c;
            ch = -1;
            len = 0;
            if ((this.position == -1)) {
                this.position = 0;
            }
            p = this.position;
            l = this.line;
            c = this.column;
            this.Advance(s, ref ch, ref len, true);
            // q0:
            // [\t-\n\r ]
            if (((((ch >= 9) 
                        && (ch <= 10)) 
                        || (ch == 13)) 
                        || (ch == 32))) {
                this.Advance(s, ref ch, ref len, false);
                goto q1;
            }
            // [\"]
            if ((ch == 34)) {
                this.Advance(s, ref ch, ref len, false);
                goto q2;
            }
            // [,]
            if ((ch == 44)) {
                this.Advance(s, ref ch, ref len, false);
                goto q9;
            }
            // [\-]
            if ((ch == 45)) {
                this.Advance(s, ref ch, ref len, false);
                goto q10;
            }
            // [0]
            if ((ch == 48)) {
                this.Advance(s, ref ch, ref len, false);
                goto q11;
            }
            // [1-9]
            if (((ch >= 49) 
                        && (ch <= 57))) {
                this.Advance(s, ref ch, ref len, false);
                goto q17;
            }
            // [\:]
            if ((ch == 58)) {
                this.Advance(s, ref ch, ref len, false);
                goto q18;
            }
            // [\[]
            if ((ch == 91)) {
                this.Advance(s, ref ch, ref len, false);
                goto q19;
            }
            // [\]]
            if ((ch == 93)) {
                this.Advance(s, ref ch, ref len, false);
                goto q20;
            }
            // [f]
            if ((ch == 102)) {
                this.Advance(s, ref ch, ref len, false);
                goto q21;
            }
            // [n]
            if ((ch == 110)) {
                this.Advance(s, ref ch, ref len, false);
                goto q26;
            }
            // [t]
            if ((ch == 116)) {
                this.Advance(s, ref ch, ref len, false);
                goto q30;
            }
            // [\{]
            if ((ch == 123)) {
                this.Advance(s, ref ch, ref len, false);
                goto q32;
            }
            // [\}]
            if ((ch == 125)) {
                this.Advance(s, ref ch, ref len, false);
                goto q33;
            }
            goto errorout;
        q1:
            // [\t-\n\r ]
            if (((((ch >= 9) 
                        && (ch <= 10)) 
                        || (ch == 13)) 
                        || (ch == 32))) {
                this.Advance(s, ref ch, ref len, false);
                goto q1;
            }
            return FAMatch.Create(10, s.Substring(p, len), p, l, c);
        q2:
            // [\0-\t\v-!#-\[\]-\x10ffff]
            if ((((((ch >= 0) 
                        && (ch <= 9)) 
                        || ((ch >= 11) 
                        && (ch <= 33))) 
                        || ((ch >= 35) 
                        && (ch <= 91))) 
                        || ((ch >= 93) 
                        && (ch <= 1114111)))) {
                this.Advance(s, ref ch, ref len, false);
                goto q2;
            }
            // [\"]
            if ((ch == 34)) {
                this.Advance(s, ref ch, ref len, false);
                goto q3;
            }
            // [\\]
            if ((ch == 92)) {
                this.Advance(s, ref ch, ref len, false);
                goto q4;
            }
            goto errorout;
        q3:
            return FAMatch.Create(9, s.Substring(p, len), p, l, c);
        q4:
            // [\"\/\\bfnrt]
            if (((((((((ch == 34) 
                        || (ch == 47)) 
                        || (ch == 92)) 
                        || (ch == 98)) 
                        || (ch == 102)) 
                        || (ch == 110)) 
                        || (ch == 114)) 
                        || (ch == 116))) {
                this.Advance(s, ref ch, ref len, false);
                goto q2;
            }
            // [u]
            if ((ch == 117)) {
                this.Advance(s, ref ch, ref len, false);
                goto q5;
            }
            goto errorout;
        q5:
            // [0-9A-Fa-f]
            if (((((ch >= 48) 
                        && (ch <= 57)) 
                        || ((ch >= 65) 
                        && (ch <= 70))) 
                        || ((ch >= 97) 
                        && (ch <= 102)))) {
                this.Advance(s, ref ch, ref len, false);
                goto q6;
            }
            goto errorout;
        q6:
            // [0-9A-Fa-f]
            if (((((ch >= 48) 
                        && (ch <= 57)) 
                        || ((ch >= 65) 
                        && (ch <= 70))) 
                        || ((ch >= 97) 
                        && (ch <= 102)))) {
                this.Advance(s, ref ch, ref len, false);
                goto q7;
            }
            goto errorout;
        q7:
            // [0-9A-Fa-f]
            if (((((ch >= 48) 
                        && (ch <= 57)) 
                        || ((ch >= 65) 
                        && (ch <= 70))) 
                        || ((ch >= 97) 
                        && (ch <= 102)))) {
                this.Advance(s, ref ch, ref len, false);
                goto q8;
            }
            goto errorout;
        q8:
            // [0-9A-Fa-f]
            if (((((ch >= 48) 
                        && (ch <= 57)) 
                        || ((ch >= 65) 
                        && (ch <= 70))) 
                        || ((ch >= 97) 
                        && (ch <= 102)))) {
                this.Advance(s, ref ch, ref len, false);
                goto q2;
            }
            goto errorout;
        q9:
            return FAMatch.Create(5, s.Substring(p, len), p, l, c);
        q10:
            // [0]
            if ((ch == 48)) {
                this.Advance(s, ref ch, ref len, false);
                goto q11;
            }
            // [1-9]
            if (((ch >= 49) 
                        && (ch <= 57))) {
                this.Advance(s, ref ch, ref len, false);
                goto q17;
            }
            goto errorout;
        q11:
            // [\.]
            if ((ch == 46)) {
                this.Advance(s, ref ch, ref len, false);
                goto q12;
            }
            // [0-9]
            if (((ch >= 48) 
                        && (ch <= 57))) {
                this.Advance(s, ref ch, ref len, false);
                goto q13;
            }
            // [Ee]
            if (((ch == 69) 
                        || (ch == 101))) {
                this.Advance(s, ref ch, ref len, false);
                goto q14;
            }
            return FAMatch.Create(6, s.Substring(p, len), p, l, c);
        q12:
            // [0-9]
            if (((ch >= 48) 
                        && (ch <= 57))) {
                this.Advance(s, ref ch, ref len, false);
                goto q13;
            }
            goto errorout;
        q13:
            // [0-9]
            if (((ch >= 48) 
                        && (ch <= 57))) {
                this.Advance(s, ref ch, ref len, false);
                goto q13;
            }
            // [Ee]
            if (((ch == 69) 
                        || (ch == 101))) {
                this.Advance(s, ref ch, ref len, false);
                goto q14;
            }
            return FAMatch.Create(6, s.Substring(p, len), p, l, c);
        q14:
            // [\+\-]
            if (((ch == 43) 
                        || (ch == 45))) {
                this.Advance(s, ref ch, ref len, false);
                goto q15;
            }
            // [0-9]
            if (((ch >= 48) 
                        && (ch <= 57))) {
                this.Advance(s, ref ch, ref len, false);
                goto q16;
            }
            goto errorout;
        q15:
            // [0-9]
            if (((ch >= 48) 
                        && (ch <= 57))) {
                this.Advance(s, ref ch, ref len, false);
                goto q16;
            }
            goto errorout;
        q16:
            // [0-9]
            if (((ch >= 48) 
                        && (ch <= 57))) {
                this.Advance(s, ref ch, ref len, false);
                goto q16;
            }
            return FAMatch.Create(6, s.Substring(p, len), p, l, c);
        q17:
            // [\.]
            if ((ch == 46)) {
                this.Advance(s, ref ch, ref len, false);
                goto q12;
            }
            // [0-9]
            if (((ch >= 48) 
                        && (ch <= 57))) {
                this.Advance(s, ref ch, ref len, false);
                goto q17;
            }
            // [Ee]
            if (((ch == 69) 
                        || (ch == 101))) {
                this.Advance(s, ref ch, ref len, false);
                goto q14;
            }
            return FAMatch.Create(6, s.Substring(p, len), p, l, c);
        q18:
            return FAMatch.Create(4, s.Substring(p, len), p, l, c);
        q19:
            return FAMatch.Create(2, s.Substring(p, len), p, l, c);
        q20:
            return FAMatch.Create(3, s.Substring(p, len), p, l, c);
        q21:
            // [a]
            if ((ch == 97)) {
                this.Advance(s, ref ch, ref len, false);
                goto q22;
            }
            goto errorout;
        q22:
            // [l]
            if ((ch == 108)) {
                this.Advance(s, ref ch, ref len, false);
                goto q23;
            }
            goto errorout;
        q23:
            // [s]
            if ((ch == 115)) {
                this.Advance(s, ref ch, ref len, false);
                goto q24;
            }
            goto errorout;
        q24:
            // [e]
            if ((ch == 101)) {
                this.Advance(s, ref ch, ref len, false);
                goto q25;
            }
            goto errorout;
        q25:
            return FAMatch.Create(7, s.Substring(p, len), p, l, c);
        q26:
            // [u]
            if ((ch == 117)) {
                this.Advance(s, ref ch, ref len, false);
                goto q27;
            }
            goto errorout;
        q27:
            // [l]
            if ((ch == 108)) {
                this.Advance(s, ref ch, ref len, false);
                goto q28;
            }
            goto errorout;
        q28:
            // [l]
            if ((ch == 108)) {
                this.Advance(s, ref ch, ref len, false);
                goto q29;
            }
            goto errorout;
        q29:
            return FAMatch.Create(8, s.Substring(p, len), p, l, c);
        q30:
            // [r]
            if ((ch == 114)) {
                this.Advance(s, ref ch, ref len, false);
                goto q31;
            }
            goto errorout;
        q31:
            // [u]
            if ((ch == 117)) {
                this.Advance(s, ref ch, ref len, false);
                goto q24;
            }
            goto errorout;
        q32:
            return FAMatch.Create(0, s.Substring(p, len), p, l, c);
        q33:
            return FAMatch.Create(1, s.Substring(p, len), p, l, c);
        errorout:
            if ((((((((((((((((((ch == -1) 
                        || ((ch >= 9) 
                        && (ch <= 10))) 
                        || (ch == 13)) 
                        || (ch == 32)) 
                        || (ch == 34)) 
                        || (ch == 44)) 
                        || (ch == 45)) 
                        || (ch == 48)) 
                        || ((ch >= 49) 
                        && (ch <= 57))) 
                        || (ch == 58)) 
                        || (ch == 91)) 
                        || (ch == 93)) 
                        || (ch == 102)) 
                        || (ch == 110)) 
                        || (ch == 116)) 
                        || (ch == 123)) 
                        || (ch == 125))) {
                if ((len == 0)) {
                    return FAMatch.Create(-2, null, 0, 0, 0);
                }
                return FAMatch.Create(-1, s.Substring(p, len), p, l, c);
            }
            this.Advance(s, ref ch, ref len, false);
            goto errorout;
        }
        public override FAMatch NextMatch() {
            return this.NextMatchImpl(this.input_string);
        }
        public const int Object = 0;
        public const int ObjectEnd = 1;
        public const int Array = 2;
        public const int ArrayEnd = 3;
        public const int FieldSeparator = 4;
        public const int Comma = 5;
        public const int Number = 6;
        public const int Boolean = 7;
        public const int Null = 8;
        public const int String = 9;
        public const int WhiteSpace = 10;
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Visual FA", "1.0.0.0")]
    internal sealed partial class JsonTextReaderRunner : FATextReaderRunner {
        public override FAMatch NextMatch() {
            int p;
            int l;
            int c;
            this.capture.Clear();
            if ((this.current == -2)) {
                this.Advance();
            }
            p = this.position;
            l = this.line;
            c = this.column;
            // q0:
            // [\t-\n\r ]
            if (((((this.current >= 9) 
                        && (this.current <= 10)) 
                        || (this.current == 13)) 
                        || (this.current == 32))) {
                this.Advance();
                goto q1;
            }
            // [\"]
            if ((this.current == 34)) {
                this.Advance();
                goto q2;
            }
            // [,]
            if ((this.current == 44)) {
                this.Advance();
                goto q9;
            }
            // [\-]
            if ((this.current == 45)) {
                this.Advance();
                goto q10;
            }
            // [0]
            if ((this.current == 48)) {
                this.Advance();
                goto q11;
            }
            // [1-9]
            if (((this.current >= 49) 
                        && (this.current <= 57))) {
                this.Advance();
                goto q17;
            }
            // [\:]
            if ((this.current == 58)) {
                this.Advance();
                goto q18;
            }
            // [\[]
            if ((this.current == 91)) {
                this.Advance();
                goto q19;
            }
            // [\]]
            if ((this.current == 93)) {
                this.Advance();
                goto q20;
            }
            // [f]
            if ((this.current == 102)) {
                this.Advance();
                goto q21;
            }
            // [n]
            if ((this.current == 110)) {
                this.Advance();
                goto q26;
            }
            // [t]
            if ((this.current == 116)) {
                this.Advance();
                goto q30;
            }
            // [\{]
            if ((this.current == 123)) {
                this.Advance();
                goto q32;
            }
            // [\}]
            if ((this.current == 125)) {
                this.Advance();
                goto q33;
            }
            goto errorout;
        q1:
            // [\t-\n\r ]
            if (((((this.current >= 9) 
                        && (this.current <= 10)) 
                        || (this.current == 13)) 
                        || (this.current == 32))) {
                this.Advance();
                goto q1;
            }
            return FAMatch.Create(10, this.capture.ToString(), p, l, c);
        q2:
            // [\0-\t\v-!#-\[\]-\x10ffff]
            if ((((((this.current >= 0) 
                        && (this.current <= 9)) 
                        || ((this.current >= 11) 
                        && (this.current <= 33))) 
                        || ((this.current >= 35) 
                        && (this.current <= 91))) 
                        || ((this.current >= 93) 
                        && (this.current <= 1114111)))) {
                this.Advance();
                goto q2;
            }
            // [\"]
            if ((this.current == 34)) {
                this.Advance();
                goto q3;
            }
            // [\\]
            if ((this.current == 92)) {
                this.Advance();
                goto q4;
            }
            goto errorout;
        q3:
            return FAMatch.Create(9, this.capture.ToString(), p, l, c);
        q4:
            // [\"\/\\bfnrt]
            if (((((((((this.current == 34) 
                        || (this.current == 47)) 
                        || (this.current == 92)) 
                        || (this.current == 98)) 
                        || (this.current == 102)) 
                        || (this.current == 110)) 
                        || (this.current == 114)) 
                        || (this.current == 116))) {
                this.Advance();
                goto q2;
            }
            // [u]
            if ((this.current == 117)) {
                this.Advance();
                goto q5;
            }
            goto errorout;
        q5:
            // [0-9A-Fa-f]
            if (((((this.current >= 48) 
                        && (this.current <= 57)) 
                        || ((this.current >= 65) 
                        && (this.current <= 70))) 
                        || ((this.current >= 97) 
                        && (this.current <= 102)))) {
                this.Advance();
                goto q6;
            }
            goto errorout;
        q6:
            // [0-9A-Fa-f]
            if (((((this.current >= 48) 
                        && (this.current <= 57)) 
                        || ((this.current >= 65) 
                        && (this.current <= 70))) 
                        || ((this.current >= 97) 
                        && (this.current <= 102)))) {
                this.Advance();
                goto q7;
            }
            goto errorout;
        q7:
            // [0-9A-Fa-f]
            if (((((this.current >= 48) 
                        && (this.current <= 57)) 
                        || ((this.current >= 65) 
                        && (this.current <= 70))) 
                        || ((this.current >= 97) 
                        && (this.current <= 102)))) {
                this.Advance();
                goto q8;
            }
            goto errorout;
        q8:
            // [0-9A-Fa-f]
            if (((((this.current >= 48) 
                        && (this.current <= 57)) 
                        || ((this.current >= 65) 
                        && (this.current <= 70))) 
                        || ((this.current >= 97) 
                        && (this.current <= 102)))) {
                this.Advance();
                goto q2;
            }
            goto errorout;
        q9:
            return FAMatch.Create(5, this.capture.ToString(), p, l, c);
        q10:
            // [0]
            if ((this.current == 48)) {
                this.Advance();
                goto q11;
            }
            // [1-9]
            if (((this.current >= 49) 
                        && (this.current <= 57))) {
                this.Advance();
                goto q17;
            }
            goto errorout;
        q11:
            // [\.]
            if ((this.current == 46)) {
                this.Advance();
                goto q12;
            }
            // [0-9]
            if (((this.current >= 48) 
                        && (this.current <= 57))) {
                this.Advance();
                goto q13;
            }
            // [Ee]
            if (((this.current == 69) 
                        || (this.current == 101))) {
                this.Advance();
                goto q14;
            }
            return FAMatch.Create(6, this.capture.ToString(), p, l, c);
        q12:
            // [0-9]
            if (((this.current >= 48) 
                        && (this.current <= 57))) {
                this.Advance();
                goto q13;
            }
            goto errorout;
        q13:
            // [0-9]
            if (((this.current >= 48) 
                        && (this.current <= 57))) {
                this.Advance();
                goto q13;
            }
            // [Ee]
            if (((this.current == 69) 
                        || (this.current == 101))) {
                this.Advance();
                goto q14;
            }
            return FAMatch.Create(6, this.capture.ToString(), p, l, c);
        q14:
            // [\+\-]
            if (((this.current == 43) 
                        || (this.current == 45))) {
                this.Advance();
                goto q15;
            }
            // [0-9]
            if (((this.current >= 48) 
                        && (this.current <= 57))) {
                this.Advance();
                goto q16;
            }
            goto errorout;
        q15:
            // [0-9]
            if (((this.current >= 48) 
                        && (this.current <= 57))) {
                this.Advance();
                goto q16;
            }
            goto errorout;
        q16:
            // [0-9]
            if (((this.current >= 48) 
                        && (this.current <= 57))) {
                this.Advance();
                goto q16;
            }
            return FAMatch.Create(6, this.capture.ToString(), p, l, c);
        q17:
            // [\.]
            if ((this.current == 46)) {
                this.Advance();
                goto q12;
            }
            // [0-9]
            if (((this.current >= 48) 
                        && (this.current <= 57))) {
                this.Advance();
                goto q17;
            }
            // [Ee]
            if (((this.current == 69) 
                        || (this.current == 101))) {
                this.Advance();
                goto q14;
            }
            return FAMatch.Create(6, this.capture.ToString(), p, l, c);
        q18:
            return FAMatch.Create(4, this.capture.ToString(), p, l, c);
        q19:
            return FAMatch.Create(2, this.capture.ToString(), p, l, c);
        q20:
            return FAMatch.Create(3, this.capture.ToString(), p, l, c);
        q21:
            // [a]
            if ((this.current == 97)) {
                this.Advance();
                goto q22;
            }
            goto errorout;
        q22:
            // [l]
            if ((this.current == 108)) {
                this.Advance();
                goto q23;
            }
            goto errorout;
        q23:
            // [s]
            if ((this.current == 115)) {
                this.Advance();
                goto q24;
            }
            goto errorout;
        q24:
            // [e]
            if ((this.current == 101)) {
                this.Advance();
                goto q25;
            }
            goto errorout;
        q25:
            return FAMatch.Create(7, this.capture.ToString(), p, l, c);
        q26:
            // [u]
            if ((this.current == 117)) {
                this.Advance();
                goto q27;
            }
            goto errorout;
        q27:
            // [l]
            if ((this.current == 108)) {
                this.Advance();
                goto q28;
            }
            goto errorout;
        q28:
            // [l]
            if ((this.current == 108)) {
                this.Advance();
                goto q29;
            }
            goto errorout;
        q29:
            return FAMatch.Create(8, this.capture.ToString(), p, l, c);
        q30:
            // [r]
            if ((this.current == 114)) {
                this.Advance();
                goto q31;
            }
            goto errorout;
        q31:
            // [u]
            if ((this.current == 117)) {
                this.Advance();
                goto q24;
            }
            goto errorout;
        q32:
            return FAMatch.Create(0, this.capture.ToString(), p, l, c);
        q33:
            return FAMatch.Create(1, this.capture.ToString(), p, l, c);
        errorout:
            if ((((((((((((((((((this.current == -1) 
                        || ((this.current >= 9) 
                        && (this.current <= 10))) 
                        || (this.current == 13)) 
                        || (this.current == 32)) 
                        || (this.current == 34)) 
                        || (this.current == 44)) 
                        || (this.current == 45)) 
                        || (this.current == 48)) 
                        || ((this.current >= 49) 
                        && (this.current <= 57))) 
                        || (this.current == 58)) 
                        || (this.current == 91)) 
                        || (this.current == 93)) 
                        || (this.current == 102)) 
                        || (this.current == 110)) 
                        || (this.current == 116)) 
                        || (this.current == 123)) 
                        || (this.current == 125))) {
                if ((this.capture.Length == 0)) {
                    return FAMatch.Create(-2, null, 0, 0, 0);
                }
                return FAMatch.Create(-1, this.capture.ToString(), p, l, c);
            }
            this.Advance();
            goto errorout;
        }
        public const int Object = 0;
        public const int ObjectEnd = 1;
        public const int Array = 2;
        public const int ArrayEnd = 3;
        public const int FieldSeparator = 4;
        public const int Comma = 5;
        public const int Number = 6;
        public const int Boolean = 7;
        public const int Null = 8;
        public const int String = 9;
        public const int WhiteSpace = 10;
    }
}

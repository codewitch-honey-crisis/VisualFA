//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VisualFA {
    using System.CodeDom;
    using System.Reflection;
    
    internal partial class DeslangedString {
        private static CodeCompileUnit _CompileUnit(string[] referencedAssemblies, CodeNamespace[] namespaces, CodeAttributeDeclaration[] assemblyCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives) {
            CodeCompileUnit result = new CodeCompileUnit();
            result.ReferencedAssemblies.AddRange(referencedAssemblies);
            result.Namespaces.AddRange(namespaces);
            result.AssemblyCustomAttributes.AddRange(assemblyCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            return result;
        }
        private static CodeNamespace _Namespace(string name, CodeNamespaceImport[] imports, CodeTypeDeclaration[] types, CodeCommentStatement[] comments) {
            CodeNamespace result = new CodeNamespace();
            result.Name = name;
            result.Imports.AddRange(imports);
            result.Types.AddRange(types);
            result.Comments.AddRange(comments);
            return result;
        }
        private static CodeTypeDeclaration _TypeDeclaration(
                    string name, 
                    bool isClass, 
                    bool isEnum, 
                    bool isInterface, 
                    bool isStruct, 
                    bool isPartial, 
                    MemberAttributes attributes, 
                    TypeAttributes typeAttributes, 
                    CodeTypeParameter[] typeParameters, 
                    CodeTypeReference[] baseTypes, 
                    CodeTypeMember[] members, 
                    CodeCommentStatement[] comments, 
                    CodeAttributeDeclaration[] customAttributes, 
                    CodeDirective[] startDirectives, 
                    CodeDirective[] endDirectives, 
                    CodeLinePragma linePragma) {
            CodeTypeDeclaration result = new CodeTypeDeclaration(name);
            result.IsClass = isClass;
            result.IsEnum = isEnum;
            result.IsInterface = isInterface;
            result.IsStruct = isStruct;
            result.IsPartial = isPartial;
            result.Attributes = attributes;
            result.TypeAttributes = typeAttributes;
            result.TypeParameters.AddRange(typeParameters);
            result.BaseTypes.AddRange(baseTypes);
            result.Members.AddRange(members);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberField _MemberField(CodeTypeReference type, string name, CodeExpression initExpression, MemberAttributes attributes, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberField result = new CodeMemberField(type, name);
            result.InitExpression = initExpression;
            result.Attributes = attributes;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberProperty _MemberProperty(CodeTypeReference type, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] getStatements, CodeStatement[] setStatements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberProperty result = new CodeMemberProperty();
            result.Type = type;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.GetStatements.AddRange(getStatements);
            result.SetStatements.AddRange(setStatements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeMemberMethod _MemberMethod(CodeTypeReference returnType, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] statements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeAttributeDeclaration[] returnTypeCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeMemberMethod result = new CodeMemberMethod();
            result.ReturnType = returnType;
            result.Name = name;
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.Statements.AddRange(statements);
            result.ImplementationTypes.AddRange(implementationTypes);
            result.PrivateImplementationType = privateImplementationType;
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.ReturnTypeCustomAttributes.AddRange(returnTypeCustomAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        public static System.CodeDom.CodeCompileUnit FAMatch {
            get {
                return DeslangedString._CompileUnit(new string[] {
                            "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"}, new CodeNamespace[] {
                            DeslangedString._Namespace("", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                                        DeslangedString._TypeDeclaration("FAMatch", false, false, false, true, true, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                                    DeslangedString._MemberField(new CodeTypeReference(typeof(int)), "_symbolId", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(typeof(string)), "_value", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(typeof(long)), "_position", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(typeof(int)), "_line", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(typeof(int)), "_column", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberProperty(new CodeTypeReference(typeof(int)), "SymbolId", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" The matched symbol - this is the accept id", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberProperty(new CodeTypeReference(typeof(string)), "Value", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" The matched value", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberProperty(new CodeTypeReference(typeof(long)), "Position", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" The position of the match within the input", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberProperty(new CodeTypeReference(typeof(int)), "Line", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" The one based line number", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberProperty(new CodeTypeReference(typeof(int)), "Column", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" The one based column", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberProperty(new CodeTypeReference(typeof(bool)), "IsSuccess", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_symbolId"), CodeBinaryOperatorType.GreaterThan, new CodePrimitiveExpression(-1)))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates whether the text matched the expression", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <remarks>Non matches are returned with negative accept symbols. You can use this" +
                                                                        " property to determine if the text therein was part of a match.</remarks>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference("FAMatch"), "Create", (MemberAttributes.Static | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "symbolId"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "value"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column")}, new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference("FAMatch"), "result", new CodeDefaultValueExpression(new CodeTypeReference("FAMatch"))),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("result"), "_symbolId"), new CodeArgumentReferenceExpression("symbolId")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("result"), "_value"), new CodeArgumentReferenceExpression("value")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("result"), "_position"), new CodeArgumentReferenceExpression("position")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("result"), "_line"), new CodeArgumentReferenceExpression("line")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("result"), "_column"), new CodeArgumentReferenceExpression("column")),
                                                                new CodeMethodReturnStatement(new CodeVariableReferenceExpression("result"))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Constructs a new instance", true),
                                                                new CodeCommentStatement(" </summary>", true),
                                                                new CodeCommentStatement(" <param name=\"symbolId\">The symbol id</param>", true),
                                                                new CodeCommentStatement(" <param name=\"value\">The matched value</param>", true),
                                                                new CodeCommentStatement(" <param name=\"position\">The match position</param>", true),
                                                                new CodeCommentStatement(" <param name=\"line\">The line</param>", true),
                                                                new CodeCommentStatement(" <param name=\"column\">The column</param>", true)}, new CodeAttributeDeclaration[] {
                                                                new CodeAttributeDeclaration(new CodeTypeReference(typeof(System.Runtime.CompilerServices.MethodImplAttribute)), new CodeAttributeArgument[] {
                                                                            new CodeAttributeArgument(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Runtime.CompilerServices.MethodImplOptions))), "AggressiveInlining"))})}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                        new CodeCommentStatement(" <summary>", true),
                                        new CodeCommentStatement(" Represents a match from <see cref=\"FARunner\"/></code>", true),
                                        new CodeCommentStatement(" </summary>", true)})}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
        private static CodeConstructor _Constructor(MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeExpression[] chainedConstructorArgs, CodeExpression[] baseConstructorArgs, CodeStatement[] statements, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
            CodeConstructor result = new CodeConstructor();
            result.Attributes = attributes;
            result.Parameters.AddRange(parameters);
            result.ChainedConstructorArgs.AddRange(chainedConstructorArgs);
            result.BaseConstructorArgs.AddRange(baseConstructorArgs);
            result.Statements.AddRange(statements);
            result.Comments.AddRange(comments);
            result.CustomAttributes.AddRange(customAttributes);
            result.StartDirectives.AddRange(startDirectives);
            result.EndDirectives.AddRange(endDirectives);
            result.LinePragma = linePragma;
            return result;
        }
        private static CodeParameterDeclarationExpression _ParameterDeclarationExpression(CodeTypeReference type, string name, FieldDirection direction, CodeAttributeDeclaration[] customAttributes) {
            CodeParameterDeclarationExpression result = new CodeParameterDeclarationExpression(type, name);
            result.Direction = direction;
            result.CustomAttributes.AddRange(customAttributes);
            return result;
        }
        public static System.CodeDom.CodeCompileUnit FARunnerString {
            get {
                return DeslangedString._CompileUnit(new string[0], new CodeNamespace[] {
                            DeslangedString._Namespace("", new CodeNamespaceImport[] {
                                        new CodeNamespaceImport("System"),
                                        new CodeNamespaceImport("System.Collections"),
                                        new CodeNamespaceImport("System.Collections.Generic"),
                                        new CodeNamespaceImport("System.Runtime.CompilerServices"),
                                        new CodeNamespaceImport("System.IO"),
                                        new CodeNamespaceImport("System.Text")}, new CodeTypeDeclaration[] {
                                        DeslangedString._TypeDeclaration("FARunner", true, false, false, false, true, (MemberAttributes.Final | MemberAttributes. Private), (((TypeAttributes.AutoLayout | TypeAttributes. AnsiClass) 
                                                        | TypeAttributes. Class) 
                                                        | TypeAttributes. Abstract), new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference("Object"),
                                                    new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("FAMatch")})}, new CodeTypeMember[] {
                                                    DeslangedString._Constructor(MemberAttributes.FamilyOrAssembly, new CodeParameterDeclarationExpression[0], new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), new CodePrimitiveExpression(-1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "line"), new CodePrimitiveExpression(1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodePrimitiveExpression(1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"), new CodePrimitiveExpression(4))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._TypeDeclaration("Enumerator", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), (((TypeAttributes.AutoLayout | TypeAttributes. AnsiClass) 
                                                                    | TypeAttributes. Class) 
                                                                    | TypeAttributes. NestedPublic), new CodeTypeParameter[0], new CodeTypeReference[] {
                                                                new CodeTypeReference("Object"),
                                                                new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("FAMatch")})}, new CodeTypeMember[] {
                                                                DeslangedString._MemberField(new CodeTypeReference(typeof(int)), "_state", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                                DeslangedString._MemberField(new CodeTypeReference("FAMatch"), "_current", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                                DeslangedString._MemberField(new CodeTypeReference("WeakReference`1", new CodeTypeReference[] {
                                                                                new CodeTypeReference("FARunner")}), "_parent", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                                DeslangedString._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                            new CodeParameterDeclarationExpression(new CodeTypeReference("FARunner"), "parent")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_parent"), new CodeObjectCreateExpression(new CodeTypeReference("WeakReference`1", new CodeTypeReference[] {
                                                                                                new CodeTypeReference("FARunner")}), new CodeExpression[] {
                                                                                            new CodeArgumentReferenceExpression("parent")})),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-2))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                                DeslangedString._MemberProperty(new CodeTypeReference("FAMatch"), "Current", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("Enumerator")}))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.LessThan, new CodePrimitiveExpression(0)), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The enumerator is not positioned on an element")}))}, new CodeStatement[0]),
                                                                            new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"))}, new CodeStatement[0], new CodeTypeReference[] {
                                                                            new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                                        new CodeTypeReference("FAMatch")})}, null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                                DeslangedString._MemberProperty(new CodeTypeReference(typeof(object)), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerator)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                                DeslangedString._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-3))}, new CodeTypeReference[0], new CodeTypeReference("IDisposable"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                                DeslangedString._MemberMethod(new CodeTypeReference(typeof(bool)), "MoveNext", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("Enumerator")}))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(0)),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("FARunner"), "parent", null),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_parent"), "TryGetTarget"), new CodeExpression[] {
                                                                                                new CodeDirectionExpression(FieldDirection.Out, new CodeVariableReferenceExpression("parent"))})), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The parent was destroyed")}))}, new CodeStatement[0]),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("parent"), "NextMatch"), new CodeExpression[0])),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-2)), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-2)),
                                                                                        new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                                DeslangedString._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-3)), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("Enumerator")}))}, new CodeStatement[0]),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("FARunner"), "parent", null),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_parent"), "TryGetTarget"), new CodeExpression[] {
                                                                                                new CodeDirectionExpression(FieldDirection.Out, new CodeVariableReferenceExpression("parent"))})), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression("The parent was destroyed")}))}, new CodeStatement[0]),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeVariableReferenceExpression("parent"), "Reset"), new CodeExpression[0])),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(-2))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberProperty(new CodeTypeReference(typeof(int)), "TabWidth", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"))}, new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePropertySetValueReferenceExpression(), CodeBinaryOperatorType.LessThan, new CodePrimitiveExpression(1)), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ArgumentOutOfRangeException"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"), new CodePropertySetValueReferenceExpression())}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" <summary>", true),
                                                                new CodeCommentStatement(" Indicates the width of a tab, in columns", true),
                                                                new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(typeof(int)), "_tabWidth", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(typeof(int)), "position", null, MemberAttributes.Family, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(typeof(int)), "line", null, MemberAttributes.Family, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(typeof(int)), "column", null, MemberAttributes.Family, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference(typeof(void)), "ThrowUnicode", (MemberAttributes.Static | MemberAttributes. Family), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "pos")}, new CodeStatement[] {
                                                                new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("IOException"), new CodeExpression[] {
                                                                                new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Concat"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("Unicode error in stream at position "),
                                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("pos"), "ToString"), new CodeExpression[0])})}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference("FAMatch"), "NextMatch", (MemberAttributes.Abstract | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", (MemberAttributes.Abstract | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference("FAMatch")}), "GetEnumerator", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeObjectCreateExpression(new CodeTypeReference("Enumerator"), new CodeExpression[] {
                                                                                new CodeThisReferenceExpression()}))}, new CodeTypeReference[] {
                                                                new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                            new CodeTypeReference("FAMatch")})}, null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference(typeof(System.Collections.IEnumerator)), "GetEnumerator", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeObjectCreateExpression(new CodeTypeReference("Enumerator"), new CodeExpression[] {
                                                                                new CodeThisReferenceExpression()}))}, new CodeTypeReference[0], new CodeTypeReference(typeof(System.Collections.IEnumerable)), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        DeslangedString._TypeDeclaration("FAStringRunner", true, false, false, false, true, (MemberAttributes.Final | MemberAttributes. Private), (((TypeAttributes.AutoLayout | TypeAttributes. AnsiClass) 
                                                        | TypeAttributes. Class) 
                                                        | TypeAttributes. Abstract), new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference("FARunner")}, new CodeTypeMember[] {
                                                    DeslangedString._MemberProperty(new CodeTypeReference(typeof(bool)), "UsingSpans", (MemberAttributes.Static | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0], new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(typeof(string)), "string", null, MemberAttributes.Family, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference(typeof(void)), "Set", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "string")}, new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "string"), new CodeArgumentReferenceExpression("string")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), new CodePrimitiveExpression(-1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "line"), new CodePrimitiveExpression(1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodePrimitiveExpression(1))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", (MemberAttributes.Override | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), new CodePrimitiveExpression(-1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "line"), new CodePrimitiveExpression(1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodePrimitiveExpression(1))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference(typeof(void)), "Advance", MemberAttributes.Family, new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "str"),
                                                                DeslangedString._ParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "ch", FieldDirection.Ref, new CodeAttributeDeclaration[0]),
                                                                DeslangedString._ParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "len", FieldDirection.Ref, new CodeAttributeDeclaration[0]),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(bool)), "first")}, new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("first")), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("ch"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(10)), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "line"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "line"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodePrimitiveExpression(0))}, new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("ch"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(13)), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodePrimitiveExpression(0))}, new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("ch"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(9)), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1)), CodeBinaryOperatorType.Divide, new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "TabWidth")), CodeBinaryOperatorType.Multiply, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "TabWidth"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))))}, new CodeStatement[] {
                                                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("ch"), CodeBinaryOperatorType.GreaterThan, new CodePrimitiveExpression(31)), new CodeStatement[] {
                                                                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[0])})})}),
                                                                            new CodeAssignStatement(new CodeArgumentReferenceExpression("len"), new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("len"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("ch"), CodeBinaryOperatorType.GreaterThan, new CodePrimitiveExpression(65535)), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeArgumentReferenceExpression("len"), new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("len"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[0]),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("str"), "Length")), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch1", new CodeIndexerExpression(new CodeArgumentReferenceExpression("str"), new CodeExpression[] {
                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position")})),
                                                                            new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "IsHighSurrogate"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("ch1")}), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), CodeBinaryOperatorType.GreaterThanOrEqual, new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("str"), "Length")), new CodeStatement[] {
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FAStringRunner")), "ThrowUnicode"), new CodeExpression[] {
                                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position")}))}, new CodeStatement[0]),
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch2", new CodeIndexerExpression(new CodeArgumentReferenceExpression("str"), new CodeExpression[] {
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position")})),
                                                                                        new CodeAssignStatement(new CodeArgumentReferenceExpression("ch"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertToUtf32"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("ch1"),
                                                                                                        new CodeVariableReferenceExpression("ch2")}))}, new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeArgumentReferenceExpression("ch"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Convert))), "ToInt32"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("ch1")}))})}, new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeArgumentReferenceExpression("ch"), new CodePrimitiveExpression(-1))})}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                                new CodeCommentStatement(" much bigger, but faster code")}, new CodeAttributeDeclaration[] {
                                                                new CodeAttributeDeclaration(new CodeTypeReference(typeof(System.Runtime.CompilerServices.MethodImplAttribute)), new CodeAttributeArgument[] {
                                                                            new CodeAttributeArgument(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Runtime.CompilerServices.MethodImplOptions))), "AggressiveInlining"))})}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        DeslangedString._TypeDeclaration("FATextReaderRunner", true, false, false, false, true, (MemberAttributes.Final | MemberAttributes. Private), (((TypeAttributes.AutoLayout | TypeAttributes. AnsiClass) 
                                                        | TypeAttributes. Class) 
                                                        | TypeAttributes. Abstract), new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference("FARunner")}, new CodeTypeMember[] {
                                                    DeslangedString._MemberField(new CodeTypeReference("TextReader"), "reader", null, MemberAttributes.Family, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference("StringBuilder"), "capture", null, MemberAttributes.Family, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(typeof(int)), "current", null, MemberAttributes.Family, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._Constructor(MemberAttributes.Family, new CodeParameterDeclarationExpression[0], new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "capture"), new CodeObjectCreateExpression(new CodeTypeReference("StringBuilder"), new CodeExpression[0]))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference(typeof(void)), "Set", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference("TextReader"), "reader")}, new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "reader"), new CodeArgumentReferenceExpression("reader")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), new CodePrimitiveExpression(-2)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), new CodePrimitiveExpression(-1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "line"), new CodePrimitiveExpression(1)),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodePrimitiveExpression(1))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", (MemberAttributes.Override | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("NotSupportedException"), new CodeExpression[0]))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference(typeof(void)), "Advance", MemberAttributes.Family, new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(10)), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "line"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "line"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodePrimitiveExpression(1))}, new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(13)), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodePrimitiveExpression(1))}, new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(9)), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1)), CodeBinaryOperatorType.Divide, new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "TabWidth")), CodeBinaryOperatorType.Multiply, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "TabWidth"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))))}, new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.GreaterThan, new CodePrimitiveExpression(31)), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[0])})})}),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.GreaterThan, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "capture"), "Append"), new CodeExpression[] {
                                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertFromUtf32"), new CodeExpression[] {
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current")})}))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "reader"), "Read"), new CodeExpression[0])),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(null)}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch1", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Convert))), "ToChar"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current")})),
                                                                new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "IsHighSurrogate"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("ch1")}), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "reader"), "Read"), new CodeExpression[0])),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FATextReaderRunner")), "ThrowUnicode"), new CodeExpression[] {
                                                                                                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position")}))}, new CodeStatement[0]),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch2", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Convert))), "ToChar"), new CodeExpression[] {
                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current")})),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertToUtf32"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("ch1"),
                                                                                            new CodeVariableReferenceExpression("ch2")})),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[0])}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
        public static System.CodeDom.CodeCompileUnit FADfaTableRunnerString {
            get {
                return DeslangedString._CompileUnit(new string[0], new CodeNamespace[] {
                            DeslangedString._Namespace("", new CodeNamespaceImport[] {
                                        new CodeNamespaceImport("System"),
                                        new CodeNamespaceImport("System.Collections"),
                                        new CodeNamespaceImport("System.Collections.Generic"),
                                        new CodeNamespaceImport("System.Runtime.CompilerServices"),
                                        new CodeNamespaceImport("System.IO"),
                                        new CodeNamespaceImport("System.Text")}, new CodeTypeDeclaration[] {
                                        DeslangedString._TypeDeclaration("FAStringDfaTableRunner", true, false, false, false, true, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference("FAStringRunner")}, new CodeTypeMember[] {
                                                    DeslangedString._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "_dfa", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "_blockEnds", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "dfa")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeArgumentReferenceExpression("dfa")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodePrimitiveExpression(null))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "dfa"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "blockEnds")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeArgumentReferenceExpression("dfa")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeArgumentReferenceExpression("blockEnds"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference("FAMatch"), "NextMatch", (MemberAttributes.Override | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_NextImpl"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "string")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference("FAMatch"), "_NextImpl", MemberAttributes.Private, new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "str")}, new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "tlen", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "tto", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "prlen", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "pmin", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "pmax", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "j", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "state", new CodePrimitiveExpression(0)),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "acc", null),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "len", new CodePrimitiveExpression(0)),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(long)), "cursor_pos", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position")),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "line", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "line")),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "column", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column")),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "ch", new CodePrimitiveExpression(-1)),
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[] {
                                                                                new CodeArgumentReferenceExpression("str"),
                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("ch")),
                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("len")),
                                                                                new CodePrimitiveExpression(true)})),
                                                                new CodeLabeledStatement("start_dfa", new CodeSnippetStatement("")),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("acc"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("state")})),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("tlen"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("state")})),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("tlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("tto"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("state")})),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("prlen"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("state")})),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("prlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("pmin"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("pmax"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("pmin")), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("prlen"), CodeBinaryOperatorType.Subtract, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), CodeBinaryOperatorType.Multiply, new CodePrimitiveExpression(2)))),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeVariableReferenceExpression("prlen"))}, new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("pmax")), new CodeStatement[] {
                                                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[] {
                                                                                                                                new CodeArgumentReferenceExpression("str"),
                                                                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("ch")),
                                                                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("len")),
                                                                                                                                new CodePrimitiveExpression(false)})),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeVariableReferenceExpression("tto")),
                                                                                                                new CodeGotoStatement("start_dfa")}, new CodeStatement[0])})})}),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("acc"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1))), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "sym", new CodeVariableReferenceExpression("acc")),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "be", new CodePrimitiveExpression(null)),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), CodeBinaryOperatorType.IdentityInequality, new CodePrimitiveExpression(null)), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), "Length"), CodeBinaryOperatorType.GreaterThan, new CodeVariableReferenceExpression("acc"))), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("be"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("acc")}))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("be"), CodeBinaryOperatorType.IdentityInequality, new CodePrimitiveExpression(null)), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodePrimitiveExpression(0)),
                                                                                        new CodeLabeledStatement("start_be_dfa", new CodeSnippetStatement("")),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("acc"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("tlen"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("tlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("tto"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("state")})),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("prlen"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("state")})),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("prlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("pmin"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("state")})),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("pmax"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("state")})),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("pmin")), new CodeStatement[] {
                                                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("prlen"), CodeBinaryOperatorType.Subtract, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), CodeBinaryOperatorType.Multiply, new CodePrimitiveExpression(2)))),
                                                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeVariableReferenceExpression("prlen"))}, new CodeStatement[] {
                                                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("pmax")), new CodeStatement[] {
                                                                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[] {
                                                                                                                                                        new CodeArgumentReferenceExpression("str"),
                                                                                                                                                        new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("ch")),
                                                                                                                                                        new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("len")),
                                                                                                                                                        new CodePrimitiveExpression(false)})),
                                                                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeVariableReferenceExpression("tto")),
                                                                                                                                        new CodeGotoStatement("start_be_dfa")}, new CodeStatement[0])})})}),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("acc"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1))), new CodeStatement[] {
                                                                                                    new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FAMatch")), "Create"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("sym"),
                                                                                                                    new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("str"), "Substring"), new CodeExpression[] {
                                                                                                                                new CodeCastExpression(new CodeTypeReference(typeof(int)), new CodeVariableReferenceExpression("cursor_pos")),
                                                                                                                                new CodeVariableReferenceExpression("len")}),
                                                                                                                    new CodeVariableReferenceExpression("cursor_pos"),
                                                                                                                    new CodeVariableReferenceExpression("line"),
                                                                                                                    new CodeVariableReferenceExpression("column")}))}, new CodeStatement[0]),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                                                    new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FAMatch")), "Create"), new CodeExpression[] {
                                                                                                                    new CodePrimitiveExpression(-1),
                                                                                                                    new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("str"), "Substring"), new CodeExpression[] {
                                                                                                                                new CodeCastExpression(new CodeTypeReference(typeof(int)), new CodeVariableReferenceExpression("cursor_pos")),
                                                                                                                                new CodeVariableReferenceExpression("len")}),
                                                                                                                    new CodeVariableReferenceExpression("cursor_pos"),
                                                                                                                    new CodeVariableReferenceExpression("line"),
                                                                                                                    new CodeVariableReferenceExpression("column")}))}, new CodeStatement[0]),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[] {
                                                                                                        new CodeArgumentReferenceExpression("str"),
                                                                                                        new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("ch")),
                                                                                                        new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("len")),
                                                                                                        new CodePrimitiveExpression(false)})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodePrimitiveExpression(0)),
                                                                                        new CodeGotoStatement("start_be_dfa")}, new CodeStatement[0]),
                                                                            new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FAMatch")), "Create"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("acc"),
                                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("str"), "Substring"), new CodeExpression[] {
                                                                                                        new CodeCastExpression(new CodeTypeReference(typeof(int)), new CodeVariableReferenceExpression("cursor_pos")),
                                                                                                        new CodeVariableReferenceExpression("len")}),
                                                                                            new CodeVariableReferenceExpression("cursor_pos"),
                                                                                            new CodeVariableReferenceExpression("line"),
                                                                                            new CodeVariableReferenceExpression("column")}))}, new CodeStatement[0]),
                                                                new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1))), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(bool)), "moved", new CodePrimitiveExpression(false)),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodePrimitiveExpression(1)),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("tlen"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("state")})),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("tlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("prlen"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("prlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("pmin"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("state")})),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("pmax"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("state")})),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("pmin")), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("prlen"), CodeBinaryOperatorType.Subtract, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), CodeBinaryOperatorType.Multiply, new CodePrimitiveExpression(2)))),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeVariableReferenceExpression("prlen"))}, new CodeStatement[] {
                                                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("pmax")), new CodeStatement[] {
                                                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("moved"), new CodePrimitiveExpression(true))}, new CodeStatement[0])})})}),
                                                                            new CodeConditionStatement(new CodeVariableReferenceExpression("moved"), new CodeStatement[] {
                                                                                        new CodeGotoStatement("break_loop")}, new CodeStatement[0]),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[] {
                                                                                            new CodeArgumentReferenceExpression("str"),
                                                                                            new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("ch")),
                                                                                            new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("len")),
                                                                                            new CodePrimitiveExpression(false)}))}),
                                                                new CodeLabeledStatement("break_loop", new CodeSnippetStatement("")),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("len"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(0)), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FAMatch")), "Create"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression(-2),
                                                                                            new CodePrimitiveExpression(null),
                                                                                            new CodePrimitiveExpression(0),
                                                                                            new CodePrimitiveExpression(0),
                                                                                            new CodePrimitiveExpression(0)}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FAMatch")), "Create"), new CodeExpression[] {
                                                                                new CodePrimitiveExpression(-1),
                                                                                new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeArgumentReferenceExpression("str"), "Substring"), new CodeExpression[] {
                                                                                            new CodeCastExpression(new CodeTypeReference(typeof(int)), new CodeVariableReferenceExpression("cursor_pos")),
                                                                                            new CodeVariableReferenceExpression("len")}),
                                                                                new CodeVariableReferenceExpression("cursor_pos"),
                                                                                new CodeVariableReferenceExpression("line"),
                                                                                new CodeVariableReferenceExpression("column")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        DeslangedString._TypeDeclaration("FATextReaderDfaTableRunner", true, false, false, false, true, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                                    new CodeTypeReference("FATextReaderRunner")}, new CodeTypeMember[] {
                                                    DeslangedString._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "_dfa", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "_blockEnds", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "dfa")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeArgumentReferenceExpression("dfa")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodePrimitiveExpression(null))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "dfa"),
                                                                new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "blockEnds")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeArgumentReferenceExpression("dfa")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeArgumentReferenceExpression("blockEnds"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                                    DeslangedString._MemberMethod(new CodeTypeReference("FAMatch"), "NextMatch", (MemberAttributes.Override | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "tlen", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "tto", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "prlen", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "pmin", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "pmax", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "j", null),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "state", new CodePrimitiveExpression(0)),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "acc", null),
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "capture"), "Clear"), new CodeExpression[0])),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-2)), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "len", new CodePrimitiveExpression(0)),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(long)), "cursor_pos", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "position")),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "line", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "line")),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "column", new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "column")),
                                                                new CodeLabeledStatement("start_dfa", new CodeSnippetStatement("")),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("acc"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("state")})),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("tlen"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("state")})),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("tlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("tto"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("state")})),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("prlen"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("state")})),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("prlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("pmin"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("pmax"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("pmin")), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("prlen"), CodeBinaryOperatorType.Subtract, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), CodeBinaryOperatorType.Multiply, new CodePrimitiveExpression(2)))),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeVariableReferenceExpression("prlen"))}, new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("pmax")), new CodeStatement[] {
                                                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[0])),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeVariableReferenceExpression("tto")),
                                                                                                                new CodeGotoStatement("start_dfa")}, new CodeStatement[0])})})}),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("acc"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1))), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "sym", new CodeVariableReferenceExpression("acc")),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "be", new CodePrimitiveExpression(null)),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), CodeBinaryOperatorType.IdentityInequality, new CodePrimitiveExpression(null)), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), "Length"), CodeBinaryOperatorType.GreaterThan, new CodeVariableReferenceExpression("acc"))), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("be"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("acc")}))}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("be"), CodeBinaryOperatorType.IdentityInequality, new CodePrimitiveExpression(null)), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodePrimitiveExpression(0)),
                                                                                        new CodeLabeledStatement("start_be_dfa", new CodeSnippetStatement("")),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("acc"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("tlen"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("tlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("tto"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("state")})),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("prlen"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("state")})),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("prlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("pmin"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("state")})),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("pmax"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("be"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("state")})),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("pmin")), new CodeStatement[] {
                                                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("prlen"), CodeBinaryOperatorType.Subtract, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), CodeBinaryOperatorType.Multiply, new CodePrimitiveExpression(2)))),
                                                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeVariableReferenceExpression("prlen"))}, new CodeStatement[] {
                                                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("pmax")), new CodeStatement[] {
                                                                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[0])),
                                                                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeVariableReferenceExpression("tto")),
                                                                                                                                        new CodeGotoStatement("start_be_dfa")}, new CodeStatement[0])})})}),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("acc"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1))), new CodeStatement[] {
                                                                                                    new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FAMatch")), "Create"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("sym"),
                                                                                                                    new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "capture"), "ToString"), new CodeExpression[0]),
                                                                                                                    new CodeVariableReferenceExpression("cursor_pos"),
                                                                                                                    new CodeVariableReferenceExpression("line"),
                                                                                                                    new CodeVariableReferenceExpression("column")}))}, new CodeStatement[0]),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1)), new CodeStatement[] {
                                                                                                    new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FAMatch")), "Create"), new CodeExpression[] {
                                                                                                                    new CodePrimitiveExpression(-1),
                                                                                                                    new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "capture"), "ToString"), new CodeExpression[0]),
                                                                                                                    new CodeVariableReferenceExpression("cursor_pos"),
                                                                                                                    new CodeVariableReferenceExpression("line"),
                                                                                                                    new CodeVariableReferenceExpression("column")}))}, new CodeStatement[0]),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[0])),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodePrimitiveExpression(0)),
                                                                                        new CodeGotoStatement("start_be_dfa")}, new CodeStatement[0]),
                                                                            new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FAMatch")), "Create"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("acc"),
                                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "capture"), "ToString"), new CodeExpression[0]),
                                                                                            new CodeVariableReferenceExpression("cursor_pos"),
                                                                                            new CodeVariableReferenceExpression("line"),
                                                                                            new CodeVariableReferenceExpression("column")}))}, new CodeStatement[0]),
                                                                new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(-1))), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(bool)), "moved", new CodePrimitiveExpression(false)),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodePrimitiveExpression(1)),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("tlen"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("state")})),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("tlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("prlen"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("state")})),
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                        new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("prlen")), new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("pmin"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("state")})),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("pmax"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_dfa"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("state")})),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("pmin")), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("state"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("state"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("prlen"), CodeBinaryOperatorType.Subtract, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), CodeBinaryOperatorType.Multiply, new CodePrimitiveExpression(2)))),
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeVariableReferenceExpression("prlen"))}, new CodeStatement[] {
                                                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "current"), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("pmax")), new CodeStatement[] {
                                                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("moved"), new CodePrimitiveExpression(true))}, new CodeStatement[0])})})}),
                                                                            new CodeConditionStatement(new CodeVariableReferenceExpression("moved"), new CodeStatement[] {
                                                                                        new CodeGotoStatement("break_loop")}, new CodeStatement[0]),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "Advance"), new CodeExpression[0]))}),
                                                                new CodeLabeledStatement("break_loop", new CodeSnippetStatement("")),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("len"), CodeBinaryOperatorType.ValueEquality, new CodePrimitiveExpression(0)), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FAMatch")), "Create"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression(-2),
                                                                                            new CodePrimitiveExpression(null),
                                                                                            new CodePrimitiveExpression(0),
                                                                                            new CodePrimitiveExpression(0),
                                                                                            new CodePrimitiveExpression(0)}))}, new CodeStatement[0]),
                                                                new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("FAMatch")), "Create"), new CodeExpression[] {
                                                                                new CodePrimitiveExpression(-1),
                                                                                new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "capture"), "ToString"), new CodeExpression[0]),
                                                                                new CodeVariableReferenceExpression("cursor_pos"),
                                                                                new CodeVariableReferenceExpression("line"),
                                                                                new CodeVariableReferenceExpression("column")}))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
            }
        }
    }
}
